{
  "contractName": "IRapiDrive",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "create_ramp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "use_ramp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "check_allowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pay_ramp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"check_allowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"create_ramp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay_ramp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"use_ramp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shacker4\",\"details\":\"This functions are for test if the interface is the correct.\",\"kind\":\"dev\",\"methods\":{\"check_allowance()\":{\"returns\":{\"_0\":\"if the user has enough RPD TOKEN to use highway\"}},\"create_ramp(string,string,uint256)\":{\"params\":{\"location\":\"of the ramp which will be created\",\"name\":\"of the ramp which will be created\",\"price\":\"of the ramp which will be created\"}},\"use_ramp(string)\":{\"params\":{\"name\":\"of the ramp to use\"}}},\"title\":\"RapiDrive highway simulator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"check_allowance()\":{\"notice\":\"Check allowance from user\"},\"create_ramp(string,string,uint256)\":{\"notice\":\"Calculate the cost of a determinate ramp\"},\"pay_ramp()\":{\"notice\":\"function to pay ramps after calculate cost and check if the driver has 10 rpd tokens.\"},\"use_ramp(string)\":{\"notice\":\"Check allowance from user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/rpd_interface.sol\":\"IRapiDrive\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/rpd_interface.sol\":{\"keccak256\":\"0x61a814fbe492adce97fa19947fee81282f1c58a0e90cf5f18e9abef859240c5e\",\"license\":\"NONE\",\"urls\":[\"bzz-raw://ce645bae8d8d4cb321397f68bdd623e3fb015354adce6a8709c35d460fbec923\",\"dweb:/ipfs/Qmbpo9gmFhotXF7ZKAMhQwx5gW92j1oihBvgH1VoGC3i69\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: NONE\r\n\r\npragma solidity ^ 0.8.11;\r\n\r\n/// @title RapiDrive highway simulator\r\n/// @author Shacker4\r\n/// @dev This functions are for test if the interface is the correct.\r\n\r\ninterface IRapiDrive {\r\n\r\n    /// @notice Calculate the cost of a determinate ramp\r\n    /// @param name of the ramp which will be created\r\n    /// @param location of the ramp which will be created\r\n    /// @param price of the ramp which will be created\r\n    function create_ramp(string memory name, string memory location, uint price) external;\r\n\r\n    /// @notice Check allowance from user\r\n    /// @param name of the ramp to use\r\n    function use_ramp(string memory name) external;\r\n\r\n    /// @notice Check allowance from user\r\n    /// @return if the user has enough RPD TOKEN to use highway\r\n    function check_allowance() external view returns(bool);\r\n\r\n    /// @notice function to pay ramps after calculate cost and check if the driver has 10 rpd tokens.\r\n    function pay_ramp() external;\r\n\r\n}",
  "sourcePath": "C:\\Users\\Pavon\\Desktop\\shacke4\\contracts\\rpd_interface.sol",
  "ast": {
    "absolutePath": "project:/contracts/rpd_interface.sol",
    "exportedSymbols": {
      "IRapiDrive": [
        1241
      ]
    },
    "id": 1242,
    "license": "NONE",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1213,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:25:9"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRapiDrive",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1214,
          "nodeType": "StructuredDocumentation",
          "src": "65:133:9",
          "text": "@title RapiDrive highway simulator\n @author Shacker4\n @dev This functions are for test if the interface is the correct."
        },
        "fullyImplemented": false,
        "id": 1241,
        "linearizedBaseContracts": [
          1241
        ],
        "name": "IRapiDrive",
        "nameLocation": "210:10:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 1215,
              "nodeType": "StructuredDocumentation",
              "src": "230:222:9",
              "text": "@notice Calculate the cost of a determinate ramp\n @param name of the ramp which will be created\n @param location of the ramp which will be created\n @param price of the ramp which will be created"
            },
            "functionSelector": "b1263b7f",
            "id": 1224,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "create_ramp",
            "nameLocation": "467:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1222,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1217,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "493:4:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1224,
                  "src": "479:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1216,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "479:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1219,
                  "mutability": "mutable",
                  "name": "location",
                  "nameLocation": "513:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1224,
                  "src": "499:22:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1218,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "499:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1221,
                  "mutability": "mutable",
                  "name": "price",
                  "nameLocation": "528:5:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1224,
                  "src": "523:10:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1220,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "523:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "478:56:9"
            },
            "returnParameters": {
              "id": 1223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "543:0:9"
            },
            "scope": 1241,
            "src": "458:86:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1225,
              "nodeType": "StructuredDocumentation",
              "src": "552:77:9",
              "text": "@notice Check allowance from user\n @param name of the ramp to use"
            },
            "functionSelector": "663868aa",
            "id": 1230,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "use_ramp",
            "nameLocation": "644:8:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1228,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1227,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "667:4:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1230,
                  "src": "653:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1226,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "653:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "652:20:9"
            },
            "returnParameters": {
              "id": 1229,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "681:0:9"
            },
            "scope": 1241,
            "src": "635:47:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1231,
              "nodeType": "StructuredDocumentation",
              "src": "690:102:9",
              "text": "@notice Check allowance from user\n @return if the user has enough RPD TOKEN to use highway"
            },
            "functionSelector": "4ddd15d5",
            "id": 1236,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "check_allowance",
            "nameLocation": "807:15:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1232,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "822:2:9"
            },
            "returnParameters": {
              "id": 1235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1234,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1236,
                  "src": "847:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1233,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "847:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "846:6:9"
            },
            "scope": 1241,
            "src": "798:55:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1237,
              "nodeType": "StructuredDocumentation",
              "src": "861:97:9",
              "text": "@notice function to pay ramps after calculate cost and check if the driver has 10 rpd tokens."
            },
            "functionSelector": "cd5a3942",
            "id": 1240,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pay_ramp",
            "nameLocation": "973:8:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1238,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "981:2:9"
            },
            "returnParameters": {
              "id": 1239,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "992:0:9"
            },
            "scope": 1241,
            "src": "964:29:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1242,
        "src": "200:798:9",
        "usedErrors": []
      }
    ],
    "src": "36:962:9"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/rpd_interface.sol",
    "exportedSymbols": {
      "IRapiDrive": [
        1241
      ]
    },
    "id": 1242,
    "license": "NONE",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1213,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:25:9"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRapiDrive",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1214,
          "nodeType": "StructuredDocumentation",
          "src": "65:133:9",
          "text": "@title RapiDrive highway simulator\n @author Shacker4\n @dev This functions are for test if the interface is the correct."
        },
        "fullyImplemented": false,
        "id": 1241,
        "linearizedBaseContracts": [
          1241
        ],
        "name": "IRapiDrive",
        "nameLocation": "210:10:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 1215,
              "nodeType": "StructuredDocumentation",
              "src": "230:222:9",
              "text": "@notice Calculate the cost of a determinate ramp\n @param name of the ramp which will be created\n @param location of the ramp which will be created\n @param price of the ramp which will be created"
            },
            "functionSelector": "b1263b7f",
            "id": 1224,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "create_ramp",
            "nameLocation": "467:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1222,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1217,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "493:4:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1224,
                  "src": "479:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1216,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "479:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1219,
                  "mutability": "mutable",
                  "name": "location",
                  "nameLocation": "513:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1224,
                  "src": "499:22:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1218,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "499:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1221,
                  "mutability": "mutable",
                  "name": "price",
                  "nameLocation": "528:5:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1224,
                  "src": "523:10:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1220,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "523:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "478:56:9"
            },
            "returnParameters": {
              "id": 1223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "543:0:9"
            },
            "scope": 1241,
            "src": "458:86:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1225,
              "nodeType": "StructuredDocumentation",
              "src": "552:77:9",
              "text": "@notice Check allowance from user\n @param name of the ramp to use"
            },
            "functionSelector": "663868aa",
            "id": 1230,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "use_ramp",
            "nameLocation": "644:8:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1228,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1227,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "667:4:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1230,
                  "src": "653:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1226,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "653:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "652:20:9"
            },
            "returnParameters": {
              "id": 1229,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "681:0:9"
            },
            "scope": 1241,
            "src": "635:47:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1231,
              "nodeType": "StructuredDocumentation",
              "src": "690:102:9",
              "text": "@notice Check allowance from user\n @return if the user has enough RPD TOKEN to use highway"
            },
            "functionSelector": "4ddd15d5",
            "id": 1236,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "check_allowance",
            "nameLocation": "807:15:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1232,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "822:2:9"
            },
            "returnParameters": {
              "id": 1235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1234,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1236,
                  "src": "847:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1233,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "847:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "846:6:9"
            },
            "scope": 1241,
            "src": "798:55:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1237,
              "nodeType": "StructuredDocumentation",
              "src": "861:97:9",
              "text": "@notice function to pay ramps after calculate cost and check if the driver has 10 rpd tokens."
            },
            "functionSelector": "cd5a3942",
            "id": 1240,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pay_ramp",
            "nameLocation": "973:8:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1238,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "981:2:9"
            },
            "returnParameters": {
              "id": 1239,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "992:0:9"
            },
            "scope": 1241,
            "src": "964:29:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1242,
        "src": "200:798:9",
        "usedErrors": []
      }
    ],
    "src": "36:962:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.11+commit.d7f03943.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.4",
  "updatedAt": "2022-04-25T01:03:36.014Z",
  "devdoc": {
    "author": "Shacker4",
    "details": "This functions are for test if the interface is the correct.",
    "kind": "dev",
    "methods": {
      "check_allowance()": {
        "returns": {
          "_0": "if the user has enough RPD TOKEN to use highway"
        }
      },
      "create_ramp(string,string,uint256)": {
        "params": {
          "location": "of the ramp which will be created",
          "name": "of the ramp which will be created",
          "price": "of the ramp which will be created"
        }
      },
      "use_ramp(string)": {
        "params": {
          "name": "of the ramp to use"
        }
      }
    },
    "title": "RapiDrive highway simulator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "check_allowance()": {
        "notice": "Check allowance from user"
      },
      "create_ramp(string,string,uint256)": {
        "notice": "Calculate the cost of a determinate ramp"
      },
      "pay_ramp()": {
        "notice": "function to pay ramps after calculate cost and check if the driver has 10 rpd tokens."
      },
      "use_ramp(string)": {
        "notice": "Check allowance from user"
      }
    },
    "version": 1
  }
}